name: Dynamic Docker Multi-Platform Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  generate-context:
    name: Generate Jobs
    runs-on: ubuntu-latest
    outputs:
      strategy: ${{ steps.generate-jobs.outputs.strategy }}
      platforms: ${{ steps.set-platforms.outputs.platforms }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
  
      - id: generate-jobs
        name: Generate Jobs
        run: |
          strategy_content=""
          versions=$(ls -d */ | grep '^[0-9]' | sed 's#/##')
          for version in $versions; do
            variants=$(cd $version; ls -d */ | sed 's#/##')
            for variant in $variants; do
              strategy_content="$strategy_content,{\"version\":\"$version\",\"variant\":\"$variant\"}"
            done
          done
          strategy="{\"include\":[ ${strategy_content:1} ]}"
          echo "strategy=$strategy" >> "$GITHUB_OUTPUT"
          jq . <<<"$strategy" # sanity check / debugging aid
        
      - id: set-platforms
        name: Set platforms
        run: |
          echo "::set-output name=platforms::\"linux/amd64\" \"linux/arm64\""
  
  
  build:
    needs: generate-context
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-context.outputs.strategy) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image for ${{ matrix.version }}-${{ matrix.variant }}
        run: |
          # Get the platforms from the job output
          platforms=(${{ needs.generate-context.outputs.platforms }})

          echo  docker buildx build --platform "${platforms[@]}" -t odyno/ampache:${{ matrix.version }}-${{ matrix.variant }} .


          # Build 
          cd ${{ matrix.version }}/${{ matrix.variant }}
          docker buildx build --platform "${platforms[@]}" -t odyno/ampache:${{ matrix.version }}-${{ matrix.variant }} .
          cd ../../

      - name: Test Docker image
        run: |
          # Get the platforms from the job output
          platforms=(${{ needs.generate-context.outputs.platforms }})
          
          # Loop over each platform
          for platform in "${platforms[@]}"; do

            # Run a test container from the image for the current platform (maybe a cli command)
            docker run --name test_container_$platform --platform $platform -d odyno/ampache:${{ matrix.version }}-${{ matrix.variant }} ls
            
            # Stop and remove the container
            docker stop test_container_$platform
            docker rm test_container_$platform
          done

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: |
          # Get the platforms from the job output
          platforms=(${{ needs.generate-context.outputs.platforms }})
          
          # Loop over each platform
          for platform in "${platforms[@]}"; do
            docker push odyno/ampache:${{ matrix.version }}-${{ matrix.variant }}
          done
